/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Customer;



import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.sun.prism.paint.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class ManageCustomerWorkAreaPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatientWorkAreaPanel
     */
   
   
        JPanel userProcessContainer;
       
        String custName=null;
        String vaccineStatus = "";
        String vaccineName="";
        String vaccineDate="";
        String userId ="";
        enum status{
            Pending
        }
    
    public ManageCustomerWorkAreaPanel(JPanel userProcessContainer,String custName) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.custName = custName;
         
        patientTable.getTableHeader().setFont(new Font("TImes New Roman",Font.BOLD,18));
        patientTable.setRowHeight(30);
        patientTable.setRowMargin(10);
        populateTable(true);
        populateDoctorCombo();
        ManagerLabelName.setText("Hello Customer:"+custName);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void populateDoctorCombo(){
        DoctorComboBox2.removeAllItems();
        MongoClient mongoClient = new MongoClient("localhost", 27017); 
        DB db = mongoClient.getDB("TestDB");
        DBCollection userCollection = db.getCollection("Doctors");
        DBCursor cursor = null;
        cursor = userCollection.find();
        while(cursor.hasNext()){
            DBObject obj = cursor.next();
            DoctorComboBox2.addItem(obj.get("_id")+"-"+obj.get("userName"));   
        }
    }

     private void populateTable(boolean flag){
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel(); 
        MongoClient mongoClient = new MongoClient("localhost", 27017); 
        DB db = mongoClient.getDB("TestDB");
        DBCollection userCollection = db.getCollection("Customers");
        
        DBCursor cursor = null;
        cursor = userCollection.find();
        model.setRowCount(0);
        
        while(cursor.hasNext()){
            Object[] row = new Object[model.getColumnCount()];
            DBObject obj = cursor.next();
            if(obj.get("userName").toString().equals(custName)){
                List<DBObject> list = (List)obj.get("vaccineInfo");
                for(DBObject object:list){
                    userId = obj.get("_id").toString();
                    row[0] = userId;
                    vaccineStatus = object.get("vaccineStatus").toString();
                    vaccineName = object.get("vaccineName").toString();
                    row[1] = vaccineName;   
                    row[2] = vaccineStatus;
                    vaccineDate = object.get("vaccineDate")!=null?object.get("vaccineDate").toString():"";
                    row[3] = vaccineDate;
                    
                    model.addRow(row);
                }                
            }
        }
        if(flag){
            Date today = new Date();
            if(new Date(vaccineDate).before(today)) {
            JOptionPane.showMessageDialog(null, "Some of your vaccinations are due today. Please get vaccinated soon");
        }
        }
        
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        imgLabel = new javax.swing.JLabel();
        ManagerLabelName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        DoctorComboBox2 = new javax.swing.JComboBox<>();
        assigndocbtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        patientTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Vaccine", "Status", "Vaccination Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientTable.setRowHeight(20);
        jScrollPane1.setViewportView(patientTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(280, 160, 890, 220);

        imgLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(imgLabel);
        imgLabel.setBounds(620, 650, 940, 170);

        ManagerLabelName.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        ManagerLabelName.setText("jLabel2");
        add(ManagerLabelName);
        ManagerLabelName.setBounds(50, 50, 400, 40);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Available Doctor:");
        add(jLabel1);
        jLabel1.setBounds(430, 470, 240, 22);

        DoctorComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DoctorComboBox2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(153, 153, 0)));
        DoctorComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoctorComboBox2ActionPerformed(evt);
            }
        });
        add(DoctorComboBox2);
        DoctorComboBox2.setBounds(720, 470, 110, 30);

        assigndocbtn.setBackground(new java.awt.Color(153, 153, 0));
        assigndocbtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        assigndocbtn.setText("Book Appointment");
        assigndocbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assigndocbtnActionPerformed(evt);
            }
        });
        add(assigndocbtn);
        assigndocbtn.setBounds(570, 560, 210, 40);
    }// </editor-fold>//GEN-END:initComponents

    private void DoctorComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoctorComboBox2ActionPerformed
       
    }//GEN-LAST:event_DoctorComboBox2ActionPerformed

    private void assigndocbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assigndocbtnActionPerformed
        int selectedRow = patientTable.getSelectedRow();
        MongoClient mongoClient = new MongoClient("localhost", 27017); 
        DB db = mongoClient.getDB("TestDB");
        DBCollection doctorCollection = db.getCollection("Doctors");
        DBCursor cursor = null;
        cursor = doctorCollection.find();
        String vaccineName = (String) patientTable.getValueAt(selectedRow,1);
        String vaccineStatus = (String) patientTable.getValueAt(selectedRow,2);
        String vaccineDate = (String) patientTable.getValueAt(selectedRow,3);
        if(selectedRow <0 ){
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning!",JOptionPane.WARNING_MESSAGE);
            
        }
        else{
            String doctor_name = DoctorComboBox2.getSelectedItem().toString();
            String id[] = doctor_name.split("-");
            while(cursor.hasNext()){
                DBObject obj = cursor.next();
                if(obj.get("_id").toString().equals(id[0])){
                    List<DBObject> list = (List)obj.get("patients");
                    if(list == null){
                        list = new ArrayList<>();
                    }
                    BasicDBObject query = new BasicDBObject();
                    query.append("patient_id",userId);
                    query.append("patient_name",custName);

                    BasicDBObject vaccines = new BasicDBObject();
                    vaccines.append("vaccineName",vaccineName);
                    vaccines.append("vaccineStatus",vaccineStatus);
                    vaccines.append("vaccineDate",vaccineDate);
                    List<BasicDBObject> vaccineList = new ArrayList<>();
                    vaccineList.add(vaccines);
                    query.append("vaccineInfo",vaccineList);

                    list.add(query);
                    obj.put("patients", list);
                    
                    BasicDBObject basicObj = new BasicDBObject();
                    basicObj.append("_id",id[0]);
                    doctorCollection.remove(basicObj);
                    doctorCollection.insert(obj);
                    
                    populateTable(false);
                }
            }
            JOptionPane.showMessageDialog(null, "Assigned Doctor for this patient", "Suceess",JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_assigndocbtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> DoctorComboBox;
    private javax.swing.JComboBox<String> DoctorComboBox1;
    private javax.swing.JComboBox<String> DoctorComboBox2;
    private javax.swing.JLabel ManagerLabelName;
    private javax.swing.JButton assigndocbtn;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientTable;
    // End of variables declaration//GEN-END:variables
}
